pipeline {
    agent any
    environment {
        PATH = "/usr/local/go/bin:$PATH"
        DOCKER_IMAGE_NAME = "drc01dev01hrbr.customs.go.id/library-stag/microfrontend-citac"
        HARBOR_CREDENTIAL_ID = 'harbor_drc'
        KUBECONFIG_CREDENTIAL_ID01 = credentials('drc-stagging')
        REGISTRY = 'drc01dev01hrbr.customs.go.id'
        HARBOR_NAMESPACE = 'library-stag'
        APP_NAME = 'microfrontend-citac'
        NAMESPACE = 'microfrontend'
        PORT = '4000'
		YAML_FILE = 'kubernetes_drcstag.yaml'
    }

    stages {
        stage ('Checkout SCM') {
            steps {
                checkout(scm)
            }
        }
        stage('Build Docker Image') {
            when { 
                branch 'develop'
            }
            steps {
                script {
                    app = docker.build(DOCKER_IMAGE_NAME, "-m 12g -f Dockerfile_stag .")
                }
            }
        }
        stage('Push Docker Image') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    docker.withRegistry('https://' + REGISTRY, HARBOR_CREDENTIAL_ID) {                   
                        app.push("${env.BUILD_NUMBER}")
                        app.push("latest")
                        app.push()
                    }
                }
            }
        }
        stage('Deploy To DRC STAGGING') {
            when {
                branch 'develop'
            }
            steps {
                sh "envsubst < $YAML_FILE | kubectl apply -f - --kubeconfig $KUBECONFIG_CREDENTIAL_ID01"
            }
        }
        stage('Get Service IP DRC STAGGING') {
            when {
                branch 'develop'
            }
            steps {
                retry(10) {
                    //withCredentials([usernamePassword(credentialsId: 'pks_client_drc01', usernameVariable: 'USERNAME', passwordVariable: 'USERPASS')]) {
                        script {
                          def ip = sh (script: "kubectl -n '$NAMESPACE' get svc '$APP_NAME' --output=jsonpath={.status.loadBalancer.ingress[].ip} --kubeconfig $KUBECONFIG_CREDENTIAL_ID01", returnStdout: true)
							sh 'sleep 5'
                            
                            echo "IP is ${ip}"
                            echo "URL is http://${ip}:$PORT"
                            
                            try {
                            } catch (err) {
                             echo: 'caught error: $err'
                            }
                        }
                    //}
                }
            }
        }
    }
}
